/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/@coreui/coreui@3.0.0/js/src/scrollspy.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{getjQuery,getSelectorFromElement,getUID,makeArray,typeCheckConfig}from"./util/index";import Data from"./dom/data";import EventHandler from"./dom/event-handler";import Manipulator from"./dom/manipulator";import SelectorEngine from"./dom/selector-engine";const NAME="scrollspy",VERSION="3.0.0",DATA_KEY="coreui.scrollspy",EVENT_KEY=`.${DATA_KEY}`,DATA_API_KEY=".data-api",Default={offset:10,method:"auto",target:""},DefaultType={offset:"number",method:"string",target:"(string|element)"},Event={ACTIVATE:`activate${EVENT_KEY}`,SCROLL:`scroll${EVENT_KEY}`,LOAD_DATA_API:`load${EVENT_KEY}.data-api`},ClassName={DROPDOWN_ITEM:"dropdown-item",ACTIVE:"active"},Selector={DATA_SPY:'[data-spy="scroll"]',NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_TOGGLE:".dropdown-toggle"},OffsetMethod={OFFSET:"offset",POSITION:"position"};class ScrollSpy{constructor(t,e){this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=`${this._config.target} ${Selector.NAV_LINKS},`+`${this._config.target} ${Selector.LIST_ITEMS},`+`${this._config.target} .${ClassName.DROPDOWN_ITEM}`,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,EventHandler.on(this._scrollElement,Event.SCROLL,t=>this._process(t)),this.refresh(),this._process(),Data.setData(t,DATA_KEY,this)}static get VERSION(){return VERSION}static get Default(){return Default}refresh(){const t=this._scrollElement===this._scrollElement.window?OffsetMethod.OFFSET:OffsetMethod.POSITION,e="auto"===this._config.method?t:this._config.method,s=e===OffsetMethod.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),makeArray(SelectorEngine.find(this._selector)).map(t=>{let i;const l=getSelectorFromElement(t);if(l&&(i=SelectorEngine.findOne(l)),i){const t=i.getBoundingClientRect();if(t.width||t.height)return[Manipulator[e](i).top+s,l]}return null}).filter(t=>t).sort((t,e)=>t[0]-e[0]).forEach(t=>{this._offsets.push(t[0]),this._targets.push(t[1])})}dispose(){Data.removeData(this._element,DATA_KEY),EventHandler.off(this._scrollElement,EVENT_KEY),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null}_getConfig(t){if("string"!=typeof(t={...Default,..."object"==typeof t&&t?t:{}}).target){let{id:e}=t.target;e||(e=getUID(NAME),t.target.id=e),t.target=`#${e}`}return typeCheckConfig(NAME,t,DefaultType),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),s=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=s){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;){this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}}_activate(t){this._activeTarget=t,this._clear();const e=this._selector.split(",").map(e=>`${e}[data-target="${t}"],${e}[href="${t}"]`),s=SelectorEngine.findOne(e.join(","));s.classList.contains(ClassName.DROPDOWN_ITEM)?(SelectorEngine.findOne(Selector.DROPDOWN_TOGGLE,SelectorEngine.closest(s,Selector.DROPDOWN)).classList.add(ClassName.ACTIVE),s.classList.add(ClassName.ACTIVE)):(s.classList.add(ClassName.ACTIVE),SelectorEngine.parents(s,Selector.NAV_LIST_GROUP).forEach(t=>{SelectorEngine.prev(t,`${Selector.NAV_LINKS}, ${Selector.LIST_ITEMS}`).forEach(t=>t.classList.add(ClassName.ACTIVE)),SelectorEngine.prev(t,Selector.NAV_ITEMS).forEach(t=>{SelectorEngine.children(t,Selector.NAV_LINKS).forEach(t=>t.classList.add(ClassName.ACTIVE))})})),EventHandler.trigger(this._scrollElement,Event.ACTIVATE,{relatedTarget:t})}_clear(){makeArray(SelectorEngine.find(this._selector)).filter(t=>t.classList.contains(ClassName.ACTIVE)).forEach(t=>t.classList.remove(ClassName.ACTIVE))}static jQueryInterface(t){return this.each(function(){let e=Data.getData(this,DATA_KEY);if(e||(e=new ScrollSpy(this,"object"==typeof t&&t)),"string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}static getInstance(t){return Data.getData(t,DATA_KEY)}}EventHandler.on(window,Event.LOAD_DATA_API,()=>{makeArray(SelectorEngine.find(Selector.DATA_SPY)).forEach(t=>new ScrollSpy(t,Manipulator.getDataAttributes(t)))});const $=getjQuery();if($){const t=$.fn[NAME];$.fn[NAME]=ScrollSpy.jQueryInterface,$.fn[NAME].Constructor=ScrollSpy,$.fn[NAME].noConflict=(()=>($.fn[NAME]=t,ScrollSpy.jQueryInterface))}export default ScrollSpy;
//# sourceMappingURL=/sm/4dc404b9777a10df635a536776f3e776b213adefd51ff0c35f018b8e06387766.map